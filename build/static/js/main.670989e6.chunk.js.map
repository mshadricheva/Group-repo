{"version":3,"sources":["Message.js","MessageList.js","MessageForm.js","Modal.js","Telega.js","App.js","serviceWorker.js","index.js"],"names":["Message","props","message","Fragment","Grid","item","xs","Card","className","key","CardHeader","action","Button","type","onClick","axios","delete","then","response","console","log","window","location","reload","title","subheader","name","MessageList","messages","JSON","parse","container","spacing","direction","this","map","React","Component","MessageForm","makeStyles","theme","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","handleClick","e","state","post","catch","error","alert","preventDefault","handleNameChange","event","target","value","handleMessageChange","classes","styles","root","onSubmit","autoComplete","TextField","id","label","onChange","defaultValue","multiline","rows","useStyles","modal","display","alignItems","justifyContent","TransitionsModal","useState","open","setOpen","text","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","AddButton","CardActions","Telega","data","App","loading","CircularProgress","setTimeout","fetch","json","setState","getLoader","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.670989e6.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './Telega.css';\r\nimport axios from 'axios';\r\n\r\n\r\nfunction Message(props) {\r\n\r\n    const handleDelete = () => {\r\n        axios.delete('http://localhost:5000/api/v1/delete', {'data': props.message})\r\n            .then(function(response) {\r\n                console.log(response);\r\n                window.location.reload(true);\r\n            })\r\n    }\r\n\r\n    if (props.message['id'] != null) {\r\n        return (\r\n            <React.Fragment>\r\n                <Grid item xs={6}>\r\n                    <Card className={'message'} key={props.message['id']}>\r\n                        <CardHeader\r\n                            action={\r\n                                <Button type=\"button\" className={\"openModal\"} onClick={handleDelete}>\r\n                                    <DeleteIcon/>\r\n                                </Button>\r\n                            }\r\n                            title={props.message.message}\r\n                            subheader={props.message.name}\r\n                        />\r\n                    </Card>\r\n                </Grid>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n    return (<></>);\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Message from './Message';\r\n\r\n\r\nclass MessageList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.messages = JSON.parse(props.messages);\r\n    }\r\n    render() {\r\n        return (\r\n            <Grid container spacing={4} direction={\"column\"}>\r\n                {\r\n                    this.messages.map((message) => (\r\n                            <Message message={message}/>\r\n                        )\r\n                    )\r\n                }\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessageList","import React, { Component } from 'react';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport axios from 'axios';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3)\r\n    }\r\n}));\r\n\r\n\r\nclass MessageForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        if (props.message)\r\n            this.message = props.message\r\n        else\r\n            this.message = {name: '', message: ''};\r\n        this.classes = props.styles;\r\n        this.state = this.message;\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        console.log(this.state)\r\n        axios.post('http://localhost:5000/api/v1/create_or_update', this.state)\r\n            .then(function(response) {\r\n                console.log(response);\r\n                window.location.reload(true);\r\n            })\r\n            .catch(function(error){\r\n                alert('Некорректная запись!');\r\n                //Perform action based on error\r\n            });\r\n        e.preventDefault();\r\n    }\r\n\r\n    handleNameChange = (event) => {\r\n        this.state.name = event.target.value;\r\n    }\r\n    handleMessageChange = (event) => {\r\n        this.state.message = event.target.value;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.classes.paper}>\r\n                <form className={this.classes.root} onSubmit={(e) => this.handleClick(e)} autoComplete=\"off\">\r\n                    <TextField\r\n                        id=\"name\"\r\n                        label=\"Name\"\r\n                        onChange={(e) => this.handleNameChange(e)}\r\n                        defaultValue={this.message ? this.message.name : null} /><br/>\r\n                    <TextField\r\n                        id=\"message\"\r\n                        label=\"Message\"\r\n                        multiline\r\n                        rows={4}\r\n                        onChange={(e) => this.handleMessageChange(e)}\r\n                        defaultValue={this.message ? this.message.message  : null} /><br/>\r\n                    <Button type=\"submit\" className={\"saveMessage\"}>Save</Button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default MessageForm;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Button from '@material-ui/core/Button';\r\nimport MessageForm from \"./MessageForm\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\n\r\nexport default function TransitionsModal(props) {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button type=\"button\" className={\"openModal\"} onClick={handleOpen}>\r\n                {props.text}\r\n            </Button>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={open}\r\n                onClose={handleClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={open}>\r\n                    <MessageForm message={props.message} styles={classes}/>\r\n                </Fade>\r\n            </Modal>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './Telega.css';\r\nimport MessageList from \"./MessageList\";\r\nimport TransitionsModal from \"./Modal\";\r\n\r\nfunction AddButton(props) {\r\n    return (\r\n        <React.Fragment>\r\n            <Grid item xs={6}>\r\n                <Card className={\"addMessage\"}>\r\n                    <CardActions>\r\n                        <TransitionsModal text={\"Add message\"}/>\r\n                    </CardActions>\r\n                </Card>\r\n            </Grid>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nclass Telega extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.data = props.data;\r\n    }\r\n\r\n    render() {\r\n        return <> <MessageList messages={this.data} /><br/>\r\n               <AddButton/>\r\n            </>\r\n    }\r\n}\r\n\r\nexport default Telega","import React from 'react';\r\nimport './App.css';\r\nimport Telega from './Telega';\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            loading: true,\r\n            data: []\r\n        };\r\n    }\r\n\r\n    getLoader() {\r\n        return <CircularProgress/>;\r\n    }\r\n\r\n    componentWillMount() {\r\n        setTimeout(() => fetch('http://localhost:5000/api/v1/get_all')\r\n            .then((response) => response.text())\r\n            .then((json) => {\r\n                this.setState({loading: false, data: JSON.parse(json)})\r\n            }, null), 2000);\r\n    }\r\n\r\n    render() {\r\n        return <><h1>MKN Dashboard</h1>\r\n            {this.state.loading ? this.getLoader() : <Telega data={this.state.data[0]}/>}</>;\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}